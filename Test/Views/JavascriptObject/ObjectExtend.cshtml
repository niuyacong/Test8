@{
    ViewBag.Title = "ObjectExtend";
}

<script type="text/javascript">
    /*检测对象是否可扩展(动态添加属性)*/
    var obj = {};
    Object.isExtensible(obj);//true

    var d = new Date();
    Object.isExtensible(d);//true

    //让对象不可扩展
    obj1=Object.preventExtensions(obj);//设置为不可扩展的，就不能再设置为可扩展的了
    alert(obj === obj1);//true
    obj1.y = 1;
    alert(obj1.y);//undefined
    Object.defineProperty(obj1, 'z', { value: 1 });//报错


    /*Object.seal()除了能将对象设置为不可扩展的，还可以将对象的所有自身属性设为不可设置。也就是说不能给这个对象添加新属性，而且它已有的属性也不能删除或配置，不过它已有的可写属性依然可写，可通过Object.isSealed()检测对象是否封闭。*/
    var obj1 = {
        x: 1,
        y: 2,
        username: 'king'
    };
    obj1.age = 12;
    //删除已有属性
    delete obj1.x;
    var o = Object.seal(obj1);
    alert(o === obj1);//true
    obj1.y = 55;
    alert(obj1.y);//55

    Object.defineProperty(obj1, 'username', {
        get: function () {
            return "lala";
        }
    });//报错

    obj1.z = 33;
    alert(obj1.z);//undefined
    delete obj1.username;//删除不掉
    alert(obj1.username);//king
    Object.isSealed(obj1);//true


    /*Object.freeze()将更严格地锁定对象--锁定（frozen）.除了对象设置为不可扩展的和将其属性设置为不可配置的之外，还可以将它自身的所有数据属性设置为只读（如果对象的存储器属性具有setter方法，存储器属性将不受影响，仍可以通过给属性赋值调用它们）。可以使用Object.isFrozen()检测对象是否被冻结*/
    var free = {
        prop: function () { },
        foo:'king'
    };
    free.test = 'this is a test';
    delete fre.prop;
    var o = Object.freeze(free);
    alert(o === free);//true
    alert(Object.isFrozen(free));//true
    o.x = 1;
    alert(o.x);//undefined
    alert(o.foo);//king
    o.foo = "queen";
    alert(o.foo);//king


    //浅冻结，并不能冻结对象的对象
    var fee1 = {
        internal: {}
    };
    Object.freeze(fee1);
    fee1.internal.x = 1;
    alert(fee1.internal.x);//1

    //递归冻结，冻结对象的对象
    function deepFreeze(obj) {
        var prop, propKey;
        Object.freeze(obj);
        for (propKey in obj) {
            if (!obj.hasOwnProperty(propKey) || !(typeof prop === 'object') || !(Object.freeze(prop))) {
                continue;
            }
            deepFreeze(prop);
        }
    }
    var obj2 = {
        internal: {}
    };
    deepFreeze(obj2);
    obj2.internal.x = 1;
    alert(obj2.internal.x);//undefined
</script>
<script type="text/javascript">
    //默认对象是可扩展的，也就是非冻结的
    alert(Object.isFrozen({}));//false
    //一个不可扩展的对象同时也是一个被冻结的对象
    var obj = Object.preventExtensions({});
    alert(Object.isFrozen(obj));//true

    //一个非空对象默认也是非冻结的
    var obj1 = { x: 1 };
    alert(Object.isFrozen(obj1));//false

    //一个对象变为不可扩展的，不代表被冻结的
    Object.preventExtensions(obj1);
    alert(Object.isFrozen(obj1));//false
    delete obj1.x;//删除唯一属性
    alert(Object.isFrozen(obj1));//true

    //一个不可扩展的对象，但拥有一个可写但不可配置的属性，仍然是非冻结的
    var obj2 = { x: 1 };
    Object.preventExtensions(obj2);
    Object.defineProperty(obj2, 'x', { writable: true });
    alert(Object.isFrozen(obj2));//false
    //将x变为不可配置的
    Object.defineProperty(obj2, 'x', { configurable: false });
    alert(Object.isFrozen(obj2));//false

    
    //一个不可扩展的对象，但拥有一个不可写，不可配置的属性，是冻结的
    var obj2 = { x: 1 };
    Object.preventExtensions(obj2);
    Object.defineProperty(obj2, 'x', { writable: false });
    alert(Object.isFrozen(obj2));//false
    //将x变为不可配置的
    Object.defineProperty(obj2, 'x', { configurable: false });
    alert(Object.isFrozen(obj2));//true


    //综上，当且仅当，对象为不可扩展的，并且所有属性为不可配置时，对象为冻结的


    //如果一个不可扩展的对象，拥有一个访问器属性，那它也是非冻结的
    var obj3 = {
        get test () {
            return 1;
        }
    }
    Object.preventExtensions(obj3);
    Object.isFrozen(obj3);//false
    Object.defineProperty(obj3, 'test', { configurable: false });
    Object.isFrozen(obj3);//true

    //
    var obj4 = { x: 1 };
    Object.freeze(obj4);
    alert(Object.isFrozen(obj4));//true
    alert(Object.isSealed(obj4));//true
    alert(Object.isExtensible(obj4));//false :不可扩展
</script>

<script type="text/javascript">
    //constructor  返回一个指向创建了该对象原型函数的引用
    var obj = new Object;
    obj.constructor == Object;//true

    var arr1 = new Array;
    arr1.constructor == Array;//true

    var n = new Number(22);
    n.constructor == Number;//true

    function test() {

    }
    var f = new test();
    f.constructor;//等同于方法test


    //toString
    var w = new test();
    //重写Object的tostring方法
    test.prototype.toString = function () {
        return "这是自定义的tostring方法";
    }
    w.toString();//这是自定义的tostring方法

    var tostring = test.prototype.toString;
    tostring.call(new Date);//Object Date
    tostring.call(Math);//Object Math
    tostring.call(null);//Object null



    //  valueof
    var oh = new { x: 1 };
    oh.valueOf();


</script>