@{
    ViewBag.Title = "CloseBag";
}

<script type="text/javascript">
    /*通过js内置函数构造器创建函数（尽量少用new关键字）*/
    var func = new Function("a", "b", "return a+b");
    alert(func(3, 5));//8
    alert(typeof func);//function
    //等价于
    var func1 = function (a, b) {
        return a + b;
    }
    alert(func1(1, 2));//3



    /*作用域链*/
    var a = 1;
    function test() {
        var b = 2;
        function test1() {
            var c = 3;
            alert(a);
            alert(b);
            alert(c);
        }
        test1();
    }
    test();//1,2,3
     

    /*词法作用域*/
    function f1() {
        var a = 12;
        return f2();
    }
    function f2() {
        var b = 12;
        return a;
    }
    alert(f1());//报错：a is not defined

    function f3() {
        var a = 12;
        return f4();
    }
    function f4() {
        var b = 44;
        return a;
    }
    alert(f3());//undefined，下方是有值的，所以是未定义的
    var a = 55;
    alert(f3());//55


    /*闭包可以突破作用域链*/
    //一种办法
    function fuc1() {
        var a = "king";
        return function () {
            return a;
        }
    }
    alert(a);//a is not defined
    var test = fuc1();
    alert(test());//king

    //第二种方法
    var n;
    function fc1() {
        var a = 'king';
        n = function () {
            return a;
        }
    }
    alert(n());//king

    //第三种办法
    function f(param) {
        var n = function () {
            return param;
        }
        param++;
        return n;//返回函数，但是并没有调用
    }
    var test = f(456);
    alert(test());//457

    /*闭包的变量值一直在内存中，不会被回收*/
    //缺点：函数中的变量被保存在内存中，内存消耗很大，所以不能滥用闭包。否则会造成网页性能问题，在IE中可能导致内存泄露。尽量在退出函数之前，将不使用的局部变量全部删除。
    function test() {
        var n = 1;
        func = function () {
            n += 1;
        };
        function f2() {
            alert(n);
        }
        return f2;
    }
    var res = test();//1
    alert(res());//undefined func没有返回值
    func();
    test();//2


    /*闭包的应用*/
    var setValue, getValue;
    //自调用函数
    //注意：闭包会在父函数外部改变父函数内部变量的值。所以，如果把父函数当做对象使用，把闭包当做它的共有方法，把内部变量当做它的私有属性，这时一定要小心，不要随便改变父函数内部变量的值。
    (function () {
        var n = 0;
        getValue = function () {
            return n;
        };
        setValue = function (x) {
            n = x;
        }
    })();
    //直接取n的值肯定会报错
    alert(getValue());//0
    //也不能设置n的值
    setValue(567);
    alert(getValue());//567

    /*闭包实现迭代器的应用*/
    function test(x) {
        var i = 0;
        return function () {
            return x[i++];
        }
    }
    var next = test(['a', 'b', 'c', 'd', 'e']);
    alert(next());//a
    alert(next());//b
    alert(next());//c
    alert(next());//d


    /*在循环中使用闭包*/

    //一、
    function f() {
        var a = [];
        var i;
        for (i = 0; i < 3; i++) {
            a[i] = function () {
                return i;
            };
        }
        return a;
    }
    //a[0~2]指向的是i的引用，而i最后的值为3，所以a[0~2]均为3
    var test = f();
    alert(test[0]());//3
    alert(test[1]());//3
    alert(test[2]());//3

    //二、
    function f1() {
        var a = [];
        var i;
        for (i = 0; i < 3; i++) {
            a[i] = (function (x) {
                return function () {
                    return x;
                }
            })(i);//将i传给x
        }
        return a;
    }
    var test = f1();
    alert(test[0]());//0
    alert(test[1]());//1
    alert(test[2]());//2
    //另一种写法
    function f2() {
        function test(x) {
            return function () {
                return x;
            }
        }
        var a = [];
        var i;
        for (i = 0; i < 3; i++) {
            a[i] = test(i);
        }
        return a;
    }
    var test = f2();
    alert(test[0]());//0
    alert(test[1]());//1
    alert(test[2]());//2
</script>
